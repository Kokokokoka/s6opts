#!/usr/bin/bash
# Copyright (C) 2015-2017 Eric Vidal <eric@obarun.org>
#
# This file is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
#
# This scripts is under License Beerware.
#
# "THE BEERWARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal http://obarun.org

##		define some variables

LIST_SERV=()
S6OPTS_CONF="/etc/obarun/s6opts.conf"


## 		common functions

usage(){
	cat << EOF
	
${bold}Usage: ${0} [options] [service_name|database_name]${reset}

General options:
	
	add : add a service on service database
	delete : delete a service on service database
	compile : compile the service database
	switch : switch the current service database and bring up/down all added/removed service
	all : compile and switch the current database
	update : add/remove a service(s) to the current database
	
	enable : enable a classic service
	disable : disable a classic service
		
	list : list classic/rc services from live database or a service(s) from a named compiled database
	list_source : list service enabled on database for compilation
		
	remove : remove a source service database
	remove_db : remove a compiled service database
	
	which_db : current/previous service database used
	
	create : create a service
	edit : edit a service file(s)
	
	verbose : be more or less verbose (permanent change)
		
EOF
	exit 0
}

##		main fonction

# ${1} name of the source where add the service
# ${2} name of the service to add
add(){
	
	local where tidy_loop
	local -a named
	
	where="${1}"
	named=( ${2} )

	
	if [[ "${where}" == "default" ]]; then
		echo_error " It's not allowed to add service on default source"
		echo_error " Please pick another one instead"
		exit 
	fi
	
	for tidy_loop in ${named[@]}; do
	
		#check if exist or not
		check_dir "${RC_AVAILABLE}/${tidy_loop}"
		if (( $? )); then # rc=1
			echo_error " ${tidy_loop} doesn't exist, choose an another name"
			exit 1
		fi	
		
		# check if directory where exist
		# if not, create it with the necessary file/folder
		check_dir "${RC_DATABASE_SOURCE}/${where}"
		if (( $? )); then
			echo_display " ${where} does not exist, create it with the necessary files"
			mkdir -p -m 0755 "${RC_DATABASE_SOURCE}/${where}" || die "Impossible to create the directroy ${RC_DATABASE_SOURCE}/${where}"
			cp -r "${RC_DATABASE_SOURCE}/default/All" "${RC_DATABASE_SOURCE}/${where}" || die "Impossible to copy from ${RC_DATABASE_SOURCE}/All to ${RC_DATABASE_SOURCE}/${where}"
		else
			if ! [[ -d "${RC_DATABASE_SOURCE}/${where}/All" ]]; then
				echo_info " Folder All does not exist, create it" 
				cp -r "${RC_DATABASE_SOURCE}/default/All" "${RC_DATABASE_SOURCE}/${where}" || die "Impossible to copy from ${RC_DATABASE_SOURCE}/All to ${RC_DATABASE_SOURCE}/${where}"
			fi
		fi
	
	
		# bundle or classic service?
		search_in_dir "${RC_AVAILABLE}" "${tidy_loop}" "contents"
	
		# if bundle, create symlink for all name in contents file 
		if (( ! $? )); then # it is a bundle
			parse_file "${RC_AVAILABLE}/${tidy_loop}" "contents"
			while read -d "," line; do
				echo_display " Copy ${line} -> ${where}"
				cp -rau "${RC_AVAILABLE}/${line}" "${RC_DATABASE_SOURCE}/${where}"
			done <<< "${LIST_SERV[@]}"
			LIST_SERV=()
			echo_display " Copy ${tidy_loop} -> ${where}"
			cp -rau "${RC_AVAILABLE}/${tidy_loop}" "${RC_DATABASE_SOURCE}/${where}" 
				
			# be sure that the name doesn't exist on file contents
			search_in_file "${RC_DATABASE_SOURCE}/${where}/All" "contents" "${tidy_loop}"
			if (( $? )); then
				echo_display " Add entry ${tidy_loop} -> ${where}/All/contents"
				echo "${tidy_loop}" >> "${RC_DATABASE_SOURCE}/${where}/All/contents"
				# remove empty line
				echo_display " Remove empty line -> ${where}/All/contents"
				sed -i "/^\s*$/d" "${RC_DATABASE_SOURCE}/${where}/All/contents"
			fi
		else
			echo_display " Copy ${tidy_loop} -> ${where}"
			cp -rau "${RC_AVAILABLE}/${tidy_loop}" "${RC_DATABASE_SOURCE}/${where}"
		
			# be sure that the name doesn't exist on file contents
			search_in_file "${RC_DATABASE_SOURCE}/${where}/All" "contents" "${tidy_loop}"
			if (( $? )); then
				echo_display " Add entry ${tidy_loop} -> ${where}/All/contents"
				echo "${tidy_loop}" >> "${RC_DATABASE_SOURCE}/${where}/All/contents"
				# remove empty line
				echo_display " Remove empty line -> ${where}/All/contents"
				sed -i "/^\s*$/d" "${RC_DATABASE_SOURCE}/${where}/All/contents"
			fi
		fi
	
	done
	
	unset named where tidy_loop
}

# ${1} name of the source where delete the service
# ${2} name of the service to delete
delete(){
	
	local tidy_loop where
	local -a named
	
	where="${1}"
	named=( ${2} )
	
	if [[ "${where}" == "default" ]]; then
		echo_error " It's not allowed to add service on default source"
		echo_error " Please pick another one instead"
		exit 
	fi
	
	for tidy_loop in ${named[@]}; do
	
		#check if exist or not
		check_dir "${RC_DATABASE_SOURCE}/${where}/${tidy_loop}"
		
		if (( $? )); then # rc=1
			echo_error " ${tidy_loop} doesn't exist, choose an another name"
			exit 1
		fi
		
		# bundle or classic service?
		search_in_dir "${RC_DATABASE_SOURCE}/${where}" "${tidy_loop}" "contents"
		
		# if bundle, remove symlink for all name in contents file 
		if (( ! $? )); then # it is a bundle
			parse_file "${RC_DATABASE_SOURCE}/${where}/${tidy_loop}" "contents"
			while read -d "," line; do
				echo_display " Remove ${line} -> ${where}"
				rm -r "${RC_DATABASE_SOURCE}/${where}/${line}"
				search_in_file "${RC_DATABASE_SOURCE}/${where}/All" "contents" "${line}"
				if (( ! $? )); then
					echo_display " Remove entry ${line} -> ${where}/All/contents"
					sed -i "s:${line}::" "${RC_DATABASE_SOURCE}/${where}/All/contents"
					# remove empty line
					echo_display " Remove empty line -> ${where}/All/contents"
					sed -i "/^\s*$/d" "${RC_DATABASE_SOURCE}/${where}/All/contents"
				fi
			done <<< "${LIST_SERV[@]}"
			LIST_SERV=()
			echo_display " Remove ${tidy_loop} -> ${where}"
			rm -r "${RC_DATABASE_SOURCE}/${where}/${tidy_loop}" 
			
			# remove bundle name on file contents
			search_in_file "${RC_DATABASE_SOURCE}/${where}/All" "contents" "${tidy_loop}"
			if (( ! $? )); then
				echo_display " Remove entry ${tidy_loop} -> ${where}/All/contents"
				sed -i "s:${tidy_loop}::" "${RC_DATABASE_SOURCE}/${where}/All/contents"
				# remove empty line
				echo_display " Remove empty line -> ${where}/All/contents"
				sed -i "/^\s*$/d" "${RC_DATABASE_SOURCE}/${where}/All/contents"
			fi
		else
			rm -r "${RC_DATABASE_SOURCE}/${where}/${tidy_loop}"
			# remove service name on file contents
			search_in_file "${RC_DATABASE_SOURCE}/${where}/All" "contents" "${tidy_loop}"
			if (( ! $? )); then
				echo_display " Remove entry ${tidy_loop} -> ${where}/All/contents"
				sed -i "s:${tidy_loop}::" "${RC_DATABASE_SOURCE}/${where}/All/contents"
				# remove empty line
				echo_display " Remove empty line -> ${where}/All/contents"
				sed -i "/^\s*$/d" "${RC_DATABASE_SOURCE}/${where}/All/contents"
			fi
		fi
	
	done
	
	unset named where tidy_loop
}

# ${1} name of the future compiled database
# ${2} name of the source to compile the database
compile(){
	
	local named with curr prev 
		
	named="${1}"
	with="${2}"
	
	curr=$(which_db current)
	curr=${curr##*/}
	prev=$(which_db previous)
	prev=${prev##*/}
	
	# be sure that Default is not used
	if [[ "${curr}" == "Default" ]] && [[ "${prev}" == "Default" ]]; then
		if [[ "${named}" == @(Default|*.src|current|previous) ]]; then
			echo_error " It's not allowed to compile Default database or using *.src symlinks"
			echo_error " Create a new one instead"
			exit 1
		fi
	fi
	
	#prevent to use Default or all symlinks
	if [[ "${named}" == @(Default|*.src|previous|current) ]]; then 
		echo_error " It's not allowed to compile Default database or using current|previous|*.src symlinks"
		echo_error " Please pick another one or create a new one"
		exit 1
	fi
	
	# prevent to use current database
	if [[ "${named}" == "${curr}" ]]; then
		echo_error " It's not allowed to compile the current database"
		echo_error " Use update command instead"
		exit 1
	fi

	# check exist or not
	check_dir "${RC_DATABASE_COMPILED}/${named}"
	if (( ! $? )); then
		echo_display " Delete ${named} database"
		rm -r "${RC_DATABASE_COMPILED}/${named}" || die "Impossible to remove ${named}"
	fi

	# compile new database
	echo_display " Compile ${named} with ${with} as source"
	s6-rc-compile -v"${VERBOSE}" "${RC_DATABASE_COMPILED}/${named}" "${RC_DATABASE_SOURCE}/${with}" || die "Impossible to compile the new database"
		
	# keep the source location
	echo_display " Make a symlinks ${named}.src -> ${with}"
	make_symlinks "-sfT" "${RC_DATABASE_SOURCE}/${with}" "${RC_DATABASE_COMPILED}" "${named}.src" || die "Impossible to create the symlinks for source location"

	
	unset named with curr prev 
}

# ${1} name of the database to switch
switch(){
	
	local named curr prev
	
	named="${1}"
	curr=$(which_db current)
	curr=${curr##*/}
	prev=$(which_db previous)
    prev="${prev##*/}"
	
	# prevent to use symlinks
	if [[ "${named}" == @(*.src|current|previous) ]]; then
		echo_error " It's not allowed to use symlinks"
		echo_error " Pick a name instead"
		exit 1
	fi
	
	# check if exist or not
	check_dir "${RC_DATABASE_COMPILED}/${named}"
	if (( $? )); then
		die "$named doesn't exist, please choose another one"
	fi
	
	# search in prev db to know what are removed services 
	# then bring down only those services

	compare_db "${named}" "${curr}" 1	

		
	# udpate current database to new database
	echo_display " Update live database to ${named}"
	s6-rc-update -l "${LIVE_RC_PATH}" -v"${VERBOSE}" "${RC_DATABASE_COMPILED}/${named}" || die "Impossible to update the new database"
	
	# update the symlinks to boot with the new database
	echo_display " Update the current symlinks -> ${named}"
	make_symlinks "-sfT" "${RC_DATABASE_COMPILED}/${named}" "${RC_DATABASE_COMPILED}" "current" || die "Impossible to create current symlinks"
	
	# change place of previous symlinks
	echo_display " Update the previous symlinks -> ${curr}"
	make_symlinks "-sfT" "${RC_DATABASE_COMPILED}/${curr}" "${RC_DATABASE_COMPILED}" "previous" || die "Impossible to create previous symlinks"
	
	# search in curr db to know what are new services 
	# then bring down only those services
	
	# Reload variable to follow the current symlinks
	curr=$(which_db current)
	curr=${curr##*/}
    prev=$(which_db previous)
    prev="${prev##*/}"

	compare_db "${curr}" "${prev}" 0
	
	unset named curr prev
}

# ${1} name of the future compiled database
# ${2} name of the source to compile the database
all(){
	
	local named who
	
	named="${1}"
	who="${2}"
	
	compile  "${named}" "${who}"
	switch "${named}"
	
	unset named who 
}
# ${1} name of the service to add at the current database
# can be a list but need to be double quoted 
# e.g update "dbus-daemon bundle-Nfs"
update(){
		
	local curr tidy_loop src  named_live named_backup
	local -a named
	
	named=( ${1} )
	curr=$(which_db current)
	curr=${curr##*/}
	
	if [[ "${curr}" =~ "Default" ]]; then
		echo_error " It's not allowed to update ${curr} database"
		echo_error " Please switch your current database to another one before"
		exit 1
	fi
	
	if [[ ! -h "${RC_DATABASE_COMPILED}/${curr}.src" ]]; then
		echo_info " Your current database is : ${curr}"
		echo_info " Impossible to determine the source for compiling your current database"
		echo_info " Please specify the source database name"
		read database_src
		
		make_symlinks "-sfT" "${RC_DATABASE_SOURCE}/${database_src}" "${RC_DATABASE_COMPILED}" "${curr}.src" || die "Impossible to create the symlinks for source location"
	fi
	
	src=$(readlink -v "${RC_DATABASE_COMPILED}/${curr}.src")
	src=${src##*/}
		
	for tidy_loop in ${named[@]}; do
	
		check_dir "${RC_DATABASE_SOURCE}/${src}/${tidy_loop}"
		if (( $? )); then
			echo_display " Add ${tidy_loop} at ${src} database"
			add "${src}" "${tidy_loop}"
		else
			echo_display " Delete ${tidy_loop} from ${src} database"
			delete "${src}" "${tidy_loop}"
		fi
	done
		
	named_live="${curr}"
	named_backup="${curr}.backup"
	
	if [[ -d "${RC_DATABASE_COMPILED}/${named_backup}" ]]; then
		echo_display " Delete old version of ${named_backup} database"
		rm -rf "${RC_DATABASE_COMPILED}/${named_backup}"
	fi
	
	echo_display " Copy ${named_live} to ${named_backup}"
	cp -rf "${RC_DATABASE_COMPILED}/${named_live}" "${RC_DATABASE_COMPILED}/${named_backup}" || die "Impossible to cp ${named} to ${named}.backup"
		
	switch "${named_backup}" 
		
	echo_display " Delete ${named_live} database"
	rm -rf "${RC_DATABASE_COMPILED}/${named_live}" || die "Impossible to remove ${named}"
	
	compile "${named_live}" "${src}"
	
	switch "${named_live}"
		
	unset named curr src tidy_loop named_live named_backup 
}
# ${1} name of symlinks, blank for both
which_db(){
	
	local named
	
	named="${1}"
	
	if [[ -z "${named}" ]]; then
		stat -c%N "${RC_DATABASE_COMPILED}/current"
		stat -c%N "${RC_DATABASE_COMPILED}/previous"
	else	
		readlink -v "${RC_DATABASE_COMPILED}/${named}"
	fi
	
	unset named
}
# ${1} name of symlinks, blank for live
which_source(){
	
	local named curr
	
	named="${1}"
	
	curr=$(which_db current)
	curr=${curr##*/}
	prev=$(which_db previous)
    prev="${prev##*/}"
    
	if [[ -z "${named}" ]]; then
		readlink -fv "${RC_DATABASE_COMPILED}/${curr}.src"
	else	
		readlink -fv "${RC_DATABASE_COMPILED}/${named}.src"
	fi
	
	unset named curr
}
	
# ${1} which database, blank for live
list(){
	
	local named tidy_loop
	local -a classic_list rc_oneshots rc_bundles rc_longruns
	
	named="${1}"
	curr=$(which_db current)
	curr=${curr##*/}
    prev=$(which_db previous)
    prev="${prev##*/}"
	
	#prevent to use symlinks
	if [[ "${named}" == @(*.src|current|previous) ]]; then
			echo_error " It's not allowed to use symlinks"
			echo_error " Pick a name instead"
			exit 1
	fi
	
	classic_list=$(ls -1 ${CLASSIC_ENABLED}| sort)
	
	printf "\n"
	printf "%s\n" "${bold}current${reset} -> ${bold}${curr}${reset}"
	printf "%s\n" "${bold}previous${reset} -> ${bold}${prev}${reset}"
	
	if (( ! "${#named}" )); then

		rc_oneshots=$(s6-rc-db -l ${LIVE_RC_PATH} list oneshots| sort)
		rc_bundles=$(s6-rc-db -l ${LIVE_RC_PATH} list bundles| sort)
		rc_longruns=$(s6-rc-db -l ${LIVE_RC_PATH} list longruns | sort)

		for tidy_loop in ${LIVE_CLASSIC_PATH}/*; do
			if check_elements "${tidy_loop##*/}" ${classic_list[@]}; then
				classic_list_parsed+=(${tidy_loop})				
			elif check_elements "${tidy_loop##*/}" ${rc_longruns[@]};then
				rc_longruns_parsed+=(${tidy_loop})
			fi
		done

		display_classic_title
		for tidy_loop in ${classic_list_parsed[@]}; do
			printf "%s\n" " ${bold}${tidy_loop##*/}${blue} ::${reset} $(s6-svstat ${tidy_loop})"
		done
		
		display_rc_longruns_title
		for tidy_loop in ${rc_longruns_parsed[@]}; do
			printf "%s\n" " ${bold}${tidy_loop##*/}${green} ::${reset} $(s6-svstat ${tidy_loop})"
		done
	
		display_rc_oneshots_title
		for tidy_loop in ${rc_oneshots[@]}; do 
			printf "%s\n" " ${bold}${tidy_loop##*/}${yellow}${reset}" 
		done
		
		display_rc_bundles_title
		for tidy_loop in ${rc_bundles[@]}; do 
			printf "%s\n" " ${bold}${tidy_loop##*/}${yellow}${reset}" 
		done
	else
		rc_oneshots=$(s6-rc-db -c "${RC_DATABASE_COMPILED}/${named}" list oneshots | sort)
		rc_bundles=$(s6-rc-db -c "${RC_DATABASE_COMPILED}/${named}" list bundles | sort)
		rc_longruns=$(s6-rc-db -c "${RC_DATABASE_COMPILED}/${named}" list longruns | sort)
	    		
		display_rc_longruns_title
		for tidy_loop in ${rc_longruns[@]}; do
			printf "%s\n" " ${bold}${tidy_loop##*/}${green}${reset}"
		done
		
		display_rc_oneshots_title
		for tidy_loop in ${rc_oneshots[@]}; do 
			printf "%s\n" " ${bold}${tidy_loop##*/}${yellow}${reset}"
		done
		
		display_rc_bundles_title
		for tidy_loop in ${rc_bundles[@]}; do 
			printf "%s\n" " ${bold}${tidy_loop##*/}${yellow}${reset}" 
		done
	fi
	
	unset named rc_list tidy_loop curr prev curr prev
	
}

# ${1} working database directory
list_source(){
	local named
	named="${1}"
	
	ls -1 --color --group-directories-first "${RC_DATABASE_SOURCE}/${named}"
		
	unset named
}

verbose(){
	local verb
	verb="${1}"
	
	if [[ "${verb}" != @(0|1|2|3) ]]; then
		die "the number must be 0,1,2 or 3"
	fi
	
	sed -i "s:VERBOSE=.*$:VERBOSE=${verb}:" "${S6OPTS_CONF}"
	
	unset verb 
	
}

remove(){
	
	local curr
	local -a named
	
	named=( ${1} )
	curr=$(which_db current)
	curr=${curr##*/}
	
	src=$(readlink -v "${RC_DATABASE_COMPILED}/${curr}.src")
	src=${src##*/}
	
	for tidy_loop in ${named[@]}; do
	
		if [[ "${tidy_loop}" == "default" ]] || [[ "${tidy_loop}" == "${src}" ]]; then
			die "Removing the default database or the source of current database is not allowed"
		fi
		
		echo_display " Deleting ${tidy_loop}"
		rm -r "${RC_DATABASE_SOURCE}/${tidy_loop}"
	
	done
	
	unset named tidy_loop
}

remove_db(){
	
	local curr
	local -a named
	
	named=( ${1} )
	curr=$(which_db current)
	
	if [[ "${named}" == @(*.src|current|previous) ]]; then
		echo_error " It's not allowed to use symlinks"
		echo_error " Pick a name instead"
		exit 1
	fi
	if  [[ "${named}" == "Default" ]]; then
		echo_error " It's not allowed to remove Default database"
		echo_error " Please pick another one"
		exit 1
	fi		
	
	for tidy_loop in ${named[@]}; do
			
		if [[ "${RC_DATABASE_COMPILED}/${tidy_loop}" == "${curr}" ]]; then
			die "Removing the current database is not allowed"
		fi
		
		echo_display " Deleting ${tidy_loop}"
		rm -r "${RC_DATABASE_COMPILED}/${tidy_loop}"
		
		if [[ -h "${RC_DATABASE_COMPILED}/${tidy_loop}.src" ]]; then
			echo_display " Deleting ${tidy_loop}.src symlinks"
			rm -f "${RC_DATABASE_COMPILED}/${tidy_loop}.src"
		fi
	done
	
	unset named curr
}

# ${1} name of the service
enable(){
	
	local tidy_loop
	local -a named
	
	named=( ${1} )
	
	for tidy_loop in ${named[@]}; do
		
		check_dir "${CLASSIC_AVAILABLE}/${tidy_loop}"
		if (( ! $? )); then
			if [[ -d "${CLASSIC_ENABLED}/${tidy_loop}" ]]; then
				echo_info "${tidy_loop} already exist at ${CLASSIC_ENABLED}, do you want to synchronize it [y|n]"
				reply_answer
				if (( ! $? )); then
					cp -ra "${CLASSIC_AVAILABLE}/${tidy_loop}" "${CLASSIC_ENABLED}/" || die "Impossible to copy ${tidy_loop} to ${CLASSIC_ENABLED}"
				else
					echo_valid " Keeping the old version"
				fi
			else
				cp -r "${CLASSIC_AVAILABLE}/${tidy_loop}" "${CLASSIC_ENABLED}/${tidy_loop}" || die "Impossible to copy ${tidy_loop} to ${CLASSIC_ENABLED}"
			fi
		else
			die "${tidy_loop} does not exist, choose another one"
		fi
			
		if [[ -h "${LIVE_CLASSIC_PATH}/${tidy_loop}" ]]; then
			echo_info " Already enabled, do you want to send a ALARM signal to ${tidy_loop}? [y|n]"
			reply_answer
			if (( ! $? )); then
				s6-svc -a "${LIVE_CLASSIC_PATH}/""${tidy_loop}"
			fi
		else
			echo_display " Enable ${tidy_loop}"
			make_symlinks "-s" "${CLASSIC_ENABLED}/${tidy_loop}" "${LIVE_CLASSIC_PATH}" "${tidy_loop}"
			
			echo_display " Bringing up ${tidy_loop}"
			s6-svscanctl -an "${LIVE_CLASSIC_PATH}"
		fi
	
	done
	
	unset named tidy_loop
}

# ${1} name of the service
disable(){
	
	local tidy_loop link_
	local -a named
	
	named=( ${1} )
	
	for tidy_loop in ${named[@]}; do
		
		link_=$(readlink "${LIVE_CLASSIC_PATH}/${tidy_loop}")
		
		if [[ "${link_}" != "${CLASSIC_ENABLED}/${tidy_loop}" ]]; then
			die " Not a classic service, choose another one"
		fi
		if [[ ! -h "${LIVE_CLASSIC_PATH}/${tidy_loop}" ]]; then
			echo_info " Not enabled, nothing to do"
			exit 0
		fi

		echo_display " Bringing down ${tidy_loop}"
		s6-svc -q "${LIVE_CLASSIC_PATH}/${tidy_loop}"
	
		check_dir "${CLASSIC_ENABLED}/${tidy_loop}"
		if (( ! $? )); then
			rm -rf "${CLASSIC_ENABLED}/${tidy_loop}" || die " Impossible to remove ${tidy_loop}"
		fi
				
		echo_display " Disable ${tidy_loop}"
		rm -f "${LIVE_CLASSIC_PATH}/${tidy_loop}"
		
		echo_display " Synchronize ${LIVE_CLASSIC_PATH} directory"
		s6-svscanctl -an "${LIVE_CLASSIC_PATH}"
	
	done
	
	unset named tidy_loop link_	
}

create(){
	
	local ans
	
	# create an rc or classic service
	echo_display " Do you want to create a rc or a classic service"
	echo_display " Enter 0 for classic, 1 for rc"
	
	read ans
	
	while [[ "${ans}" != @(0|1) ]]; do
		echo_retry " Please answer 0 or 1"
		read ans
	done
	
	if (( ! "${ans}" )); then
		create_classic
	else
		create_rc
	fi
	
	unset ans
}

create_classic(){
	
	local named
	
	#check if template exist
	check_dir "${SERVICES_TEMPLATES}/base-s6serv"
	if (( $? )); then
		echo_exit " The template to create a classic service doesn't exist"
		exit 1
	fi
	
	echo_display " Enter the name of the service to create"
	read named
	
	#check if service already exist
	check_dir "${CLASSIC_AVAILABLE}/${named}"
	if (( ! $? )); then
		echo_error " ${named} already exist, choose an another name"
		exit 1
	fi
	
	# copy template
	copy_templates "base-s6serv" "${CLASSIC_AVAILABLE}"
	chmod -R 0755 "${CLASSIC_AVAILABLE}/${named}"
	
	pushd "${CLASSIC_AVAILABLE}/${named}" &>/dev/null
	
	sed -i "s:base:${named}:g" "log/run"
	for i in down notification-fd notsetsid timeout-finish; do
		chmod 0644 "${i}"
	done
	popd &>/dev/null
	
	# edit the file
	echo_display " Select the file that you want to edit :"
	list_file "${EDITOR}" "${CLASSIC_AVAILABLE}" "${named}"
	
	# remove uneeded files
	remove_file "${CLASSIC_AVAILABLE}" "${named}"
	
	# remove uneeded directories
	remove_dir "${CLASSIC_AVAILABLE}" "${named}"
	
	#allow to enable the service 
	echo_display " Do you want to enable the service $named? [y|n]"
	reply_answer
	if (( $? )); then
		exit 0
	else
		enable "${named}"
	fi
	
	unset named
}

create_rc(){
	
	local named work_dir tidy_loop curr
	local -a templates_list final_list
	
	#check if template exist
	check_dir "${SERVICES_TEMPLATES}/base-s6rcserv"
	if (( $? )); then
		echo_exit " The template to create a rc service doesn't exist"
		exit 1
	fi
	
	echo_display " Enter the name of the service to create"
	read named
	
	#capitalize named for the bundle name
	named_cap=( "${named[*]^}" )
	
	#create a working directory
	work_dir=$(mktemp -d /tmp/s6opts.XXXXXX)
	
	# copy template
	copy_templates "base-s6rcserv" "${work_dir}"
	chmod -R 0755 "${work_dir}"
	
	pushd "${work_dir}/${named}" &>/dev/null
	
	# rename the file becoming from template 
	find -type d -name 'base-*' | rename base "${named}" *
	rename bundle-Base bundle-${named_cap} *
	
	#check if service already exist
	templates_list=$(ls)
	
	for tidy_loop in ${templates_list[@]}; do
		check_dir "${RC_AVAILABLE}/${tidy_loop}"
		if (( ! $? )); then
			echo_error " ${tidy_loop} already exist, choose an another name"
			rm -r ${work_dir}
			exit 1
		fi
	done
	
	sed -i "s:base:${named}:g" "${named}-log/run"
	
	# apply a good permissions
	while read i; do
		cd "${work_dir}/${named}/${i}" 
			chmod 0644 *
		cd ..
	done < <(ls "${work_dir}/${named}")
	
	# edit the file
	echo_display " Select the file that you want to edit :"
	list_file "${EDITOR}" "${work_dir}" "${named}"
	
	# remove uneeded files
	remove_file "${work_dir}" "${named}"
	
	# delete uneeded directories
	remove_dir "${work_dir}" "${named}"
	
	final_list=$(ls -1)
	
	popd &>/dev/null
	
	# finaly copy to the right place
	cp -r "${work_dir}/${named}"/* "${RC_AVAILABLE}"
	
	#allow to enable the service 
	echo_display " Do you want to update your current live database with ${named} service? [y|n]"
	reply_answer
	if (( $? )); then
		exit 0
	else
		update ${final_list[@]}
	fi
	
	unset named work_dir tidy_loop templates_list final_list curr
}

# ${1} name of the service
edit(){
	
	local named type curr
	local -a classic rc
	
	named="${1}"
	curr=$(which_db current)
	curr=${curr##*/}
	type=3
	
	check_dir "${CLASSIC_AVAILABLE}/${named}"
	if (( ! $? )); then
		type=0
	fi
	
	check_dir "${RC_AVAILABLE}/${named}"
	if (( ! $? )); then
		type=1
	fi
	if [[ "${type}" == 3 ]]; then
		echo_error " ${named} doesn't exist, choose an another name"
		exit 1
	fi
	if (( ! "${type}" )); then 
		list_file "${EDITOR}" "${CLASSIC_AVAILABLE}" "${named}"
		echo_display " Do you want to enable the service? [y|n]"
		reply_answer
		if (( $? )); then
			exit 0
		fi
		enable "${named}"
	else
		list_file "${EDITOR}" "${RC_AVAILABLE}" "${named}"
		# bundle or not, if bundle allow to update the database
		search_in_dir "${RC_AVAILABLE}" "${named}" "contents"
		if (( ! $? )); then
			echo_display " Do you want to update your current live database with ${named} service? [y|n]"
			reply_answer
			if (( $? )); then
				exit 0
			fi
			update "${named}"
		fi
	fi
	
	
	
	unset named type classic rc
	
}

##############################################
##				sub functions				##
##############################################

# ${1} path to the database
# ${2} name of the database
# ${3} searched onto the database
# return 0 on success, 1 on fail
search_in_db(){
	
	local path_file named search line in_db rc
	local -a list_all
	
	path_file="${1:-${RC_DATABASE_COMPILED}}"
	named="${2:-current}"
	search="${3}"
	in_db="${path_file}/${named}"
	list_all=$( (s6-rc-db -c "${in_db}" list all) )
	
	for line in ${list_all[@]}; do
		case $line in
			$search) return 0;;
			*) rc=1;;
		esac
	done
	if (( "${rc}" )); then
		return 1
	fi
	unset path_file named search line in_db list_all rc
}

# ${1} current database
# ${2} previous database
# ${3} signal to pass up or down
#		0 for up, 1 for down
compare_db(){
	
	local curr prev signal check line 
	local -a curr_db prev_db long_db short_db which_up which_down
	
	curr="${1}"
	prev="${2}"
	signal="${3}"
	curr_db=( $(s6-rc-db -c "${RC_DATABASE_COMPILED}/${curr}" list all) )
	prev_db=( $(s6-rc-db -c "${RC_DATABASE_COMPILED}/${prev}" list all) )
	
	long_db="${curr_db[@]}"
	short_db="${prev_db[@]}"
	
	for check in ${long_db[@]}; do
		#echo checku::$check
		search_in_db "" "${prev}" "${check}"
		if (( $? )); then
			which_up+=($check,)
			#echo ${bold}check_up::$check${reset}
		fi
	done 
	
	for check in ${short_db[@]}; do
		#echo checkd::$check
	 	search_in_db "" "${curr}" "${check}"
		if ((  $? )); then
			which_down+=($check,)
			#echo ${bold}check_down::$check${reset}
		fi
	done 
	
	# bring up the new service
	if (( ! "${signal}" )); then
		while read -d "," line; do
			bringing "u" "$line"
		done <<<  "${which_up[@]}"
	fi
	
	# bring down the new service
	if (( "${signal}" )); then
		while read -d "," line; do
			bringing "d" "$line"
		done <<<  "${which_down[@]}"
	fi
	
	
	unset curr prev signal check line curr_db prev_db long_db short_db which_up which_down
}
# ${1} action, must be u for up or d for down
# ${2} name of the bundle/service to bring up/down
bringing(){
	
	local action named action_msg
	
	action="${1}"
	named="${2}"
	
	if [[ "${action}" == "u" ]]; then
		action_msg="${bblue}up${reset}"
	else
		action_msg="${bred}down${reset}"
	fi
	
	echo_display " ${reset}Bringing ${action_msg} ${named}"
	s6-rc -l "${LIVE_RC_PATH}" -v${VERBOSE} -"${action}" change "${named}"
	
	unset action named action_msg
}

# ${1} path to the file
# ${2} file to parse
parse_file(){
	
	local check path_file named
	
	path_file="${1}"
	named="${2}"
	
	while read check; do
		LIST_SERV+=($check,)
	done < "${path_file}/${named}"

	unset check path_file named
}

# {1} template to copy, classic or rc
# {2} where template is copied, CLASSIC_AVAILABLE or RC_AVAILABLE
copy_templates(){

	local templates_sort available_sort
	
	templates_sort="${1}"
	available_sort="${2}"
	
	cp -r "${SERVICES_TEMPLATES}/${templates_sort}" "${available_sort}/${named}"

	unset templates_sort available_sort
}

# ${1} path to the directory
# ${2} name of the directory containing the files to remove
remove_file(){
	
	local _path _named
	
	_path="${1}"
	_named="${2}"
	
	echo_display " Do you want to remove some files [y|n]"
	reply_answer
	
	if (( $? )); then
		return 1
	fi
	echo_display " Select the file to remove :"
	list_file "rm" "${_path}" "${_named}" 
	
	unset _path _named
}
# ${1} path to the directory
# ${2} name of the directory containing directories to delete
remove_dir(){
	
	local _path _named dir
	local -a dir_list
	
	_path="${1}"
	_named="${2}"
	
	echo_display " Do you want to remove some directories [y|n]"
	reply_answer
	
	if (( $? )); then
		return 1
	fi
	
	echo_display " Select a directory to remove :"
	remove_dir_sub(){
		
		dir_list=$(find ${_path}/${_named} -maxdepth 1 -mindepth 1 -type d | sed 's:.*/::')
		#dir_list=$(ls ${_path}/${_named})
		dir_list+=" Exit"
		
		select dir in ${dir_list[@]}; do
			case $dir in
				Exit)
					break
					;;
				*)	if check_elements "$dir" ${dir_list[@]};then
						rm -r ${_path}/${_named}/${dir}
						remove_dir_sub
					else
						echo_retry " Invalid number, retry :"
						remove_dir_sub
					fi
					;;
			esac
			break
		done
	}
	remove_dir_sub
	
	unset _path _named dir dir_list
}
	
list_file(){
	
	local action dir _named file
	local -a file_list
		
	action="${1}"
	dir="${2}"
	_named="${3}"
	
	file_list=$(ls -d $dir/$_named/* | awk -F "$dir/$_named/" '{ print $2 }' | uniq) 
	file_list+=" Exit"
	
	select file in ${file_list[@]}; do
		case $file in 
			Exit)break;;
			*)if check_elements "$file" ${file_list[@]}; then
				if [[  -d "${dir}/${_named}/${file}" ]]; then
					sub_list "${file}" "${action}" "${dir}" "${_named}"
				else
					"${action}" "${dir}/${_named}/${file}"
					list_file "${action}" "${dir}" "${_named}"
				fi
				
			else 
				echo_retry " Invalid number, retry :"
				list_file "${action}" "${dir}" "${_named}"
			fi
			;;
		esac
		break
	done
	
	unset action dir _named file_list file
}

sub_list(){
	
	local action dir _named sub_dir sub_file
	local -a sub_list
	
	sub_dir="${1}"
	action="${2}"
	dir="${3}"
	_named="${4}"
	
	sub_list=$(ls $dir/$_named/$sub_dir/* 2>/dev/null | awk -F "$dir/$_named/$sub_dir/" '{ print $2 }') 
	sub_list+=" Exit"
	
	select sub_file in ${sub_list[@]}; do
		case $sub_file in
			Exit)list_file "${action}" "${dir}" "${_named}"
				break;;
			*)if check_elements "$sub_file" ${sub_list[@]}; then
				"$action" "${dir}/${_named}/${sub_dir}/${sub_file}"
				sub_list "${sub_dir}" "${action}" "${dir}" "${_named}"
			  else
				echo_retry " Invalid number, retry :"
				sub_list "${file}" "${action}" "${dir}" "${_named}"
			  fi
			  ;;
		esac
		break
	done
	
	unset action dir _named sub_dir sub_list sub_file
}

display_classic_title(){
	printf "\n"
	printf "%s\n" "${bblue}Classic service(s)${reset}"
	printf "\n"
}

display_rc_longruns_title(){
	printf "\n"
	printf "%s\n" "${bgreen}Rc longruns service(s)${reset}"
	printf "\n"
}

display_rc_oneshots_title(){
	printf "\n"
	printf "%s\n" "${byellow}Rc oneshots service(s)${reset}"
	printf "\n"
}

display_rc_bundles_title(){
	printf "\n"
	printf "%s\n" "${byellow}Rc bundles${reset}"
	printf "\n"
}
