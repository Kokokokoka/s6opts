#compdef s6opts
# Copyright (C) 2015-2016 Eric Vidal <eric@obarun.org>
#
# Completion for s6opts
#
# This file is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.
#
# This scripts is under License Beerware.
#
# "THE BEERWARE LICENSE" (Revision 42):
# <eric@obarun.org> wrote this file.  As long as you retain this notice you
# can do whatever you want with this stuff. If we meet some day, and you think
# this stuff is worth it, you can buy me a beer in return.   Eric Vidal http://obarun.org

_s6opts(){

typeset -A opt_args
local ret=1 context state line curcontext="$curcontext"

source /etc/obarun/s6opts.conf

_path() {
	local list_dir
	list_dir=( $RC_DATABASE_SOURCE/*(-/N:t) )
	compadd -X "choose an existing database or create a new one" "$@" -a list_dir 
}
_list_available() {
	local list_dir
	list_dir=( $RC_AVAILABLE/*(-/N:t) )
	(( $#list_dir )) && _values services $list_dir && ret=0
}

_list_delete(){
	local list_dir
	list_dir=( $RC_DATABASE_SOURCE/*/*(-/N:t) )
	(( $#list_dir )) && _values services $list_dir #&& ret=0
}

_list_database(){
	local list_dir
	list_dir=( $RC_DATABASE_COMPILED/*(-/N:t) )
	(( $#list_dir )) && _values database_name $list_dir && ret=0
}

_list_database_to_compile(){
	local list_dir
	list_dir=( $RC_DATABASE_SOURCE/*(-/N:t) )
	(( $#list_dir )) && _values database_name $list_dir && ret=0
}

_arguments -C \
	'1:cmd:->cmds' \
	'*:: :->args' \
	&& ret=0

	
case $state in
	(cmds) 
		local commands; commands=(
			'add:add a service on service database'
			'delete:delete a service on service database' 
			'compile:compile the service database' 
			'switch:switch the current service database'
			'all:compile and switch the current database'
			'update:add a service(s) to the current database'
			'list_db:list of services on current database'
			'list:list service enabled on database for compilation'
			'verbose:be more or less verbose (permanent change)'
			'remove:remove a source service database'
			'remove_db:remove a compiled service database'
			'which_db:current/previous service database used'
			'enable:enable a classic service'
			'disable:disable a classic service'
			'create:create a service'
			'edit:edit a service file(s)'
			'list_classic:list of services enabled at boot time'
             ) 
         _describe -t commands 's6opts command' commands && ret=0    
        ret=0
        ;;
    (args)
		curcontext="${curcontext%:*:*}:s6opts-cmd-$words[1]:"
		case $words[1] in
			add)
				_arguments : \
					':database_name:_path' \
					'*:services:_list_available'
				;;
			delete)
				_arguments : \
					':database_name:_path' \
					'*:services:_list_delete' 
				;;
			update)
				_arguments : \
					'*:services:_list_available' 
				;;
			compile|all)
				_arguments : \
					':live_database_name:_list_database' \
					':compiled_database_name:_list_database_to_compile' 
				;;
			switch|remove_db|list_db)
				local list_dir
				list_dir=( $RC_DATABASE_COMPILED/*(-/N:t) )
				(( $#list_dir )) && _values database_name $list_dir && ret=0
				;;
			list|remove)
				local list_dir
				list_dir=( $RC_DATABASE_SOURCE/*(-/N:t) )
				(( $#list_dir )) && _values database_name $list_dir && ret=0
				;;
			which_db)
				local list_dir
				list_dir=(current previous)
				(( $#list_dir )) && _values link_name $list_dir && ret=0
				;;
			verbose)
				_message 'only 0,1,2, or 3 are valid'
				;;
			enable)
				local list_dir
				list_dir=( $CLASSIC_AVAILABLE/*(-/N:t) )
				(( $#list_dir )) && _values services $list_dir && ret=0
				;;
			disable)
				local list_dir
				list_dir=( $LIVE_CLASSIC_PATH/*(-/N:t) )
				(( $#list_dir )) && _values services $list_dir && ret=0
				;;
			esac
			
	;;
esac

return $ret
}

_s6opts "$@"

